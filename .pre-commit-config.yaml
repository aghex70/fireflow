# Pre-commit configuration for FireFlow
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # Ruff - Python linter and formatter (replaces flake8, black, isort, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      # Run the linter
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi, jupyter]
      # Run the formatter
      - id: ruff-format
        types_or: [python, pyi, jupyter]

  # Pre-commit hooks for general file management
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # General file checks
      - id: trailing-whitespace
        exclude: ^.*\.md$
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: destroyed-symlinks

      # Python-specific checks
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      - id: requirements-txt-fixer
        files: requirements.*\.txt$

      # Security checks
      - id: detect-aws-credentials
      - id: detect-private-key

  # MyPy - Static type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-redis
          - types-requests
          - pydantic
          - sqlalchemy
        args: [--strict, --ignore-missing-imports]
        exclude: ^(tests/|migrations/)

  # Security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
        additional_dependencies: ["bandit[toml]"]
        exclude: ^tests/

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        additional_dependencies: [tomli]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types_or: [yaml, markdown, json]
        exclude: ^(.*\.md|.*\.json)$

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC1091]

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run tests before commit
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        args: [--tb=short, -q, tests/, -x, --disable-warnings]
        pass_filenames: false
        stages: [push]

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: Check for TODO/FIXME in production code
        entry: bash -c 'if grep -r "TODO\|FIXME" src/ --exclude-dir=__pycache__ --include="*.py"; then echo "TODO/FIXME found in production code"; exit 1; fi'
        language: system
        pass_filenames: false

      # Check for print statements in production code
      - id: check-print-statements
        name: Check for print statements in production code
        entry: bash -c 'if grep -r "print(" src/ --exclude-dir=__pycache__ --include="*.py"; then echo "print() statements found in production code"; exit 1; fi'
        language: system
        pass_filenames: false

      # Check for debug statements
      - id: check-debug-statements
        name: Check for debug statements
        entry: bash -c 'if grep -r "pdb\|debugger\|breakpoint(" src/ --exclude-dir=__pycache__ --include="*.py"; then echo "Debug statements found in production code"; exit 1; fi'
        language: system
        pass_filenames: false

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "2.20.0"

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [pytest-check] # Skip slow tests in CI
  submodules: false

