[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "fireflow"
version = "1.0.0"
description = "Firewall Management System with async task processing"
authors = [
    {name = "FireFlow Team", email = "contact@fireflow.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking :: Firewalls",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    # Flask and web framework dependencies
    "flask>=2.3.3,<3.0.0",
    "flask-cors>=4.0.0,<5.0.0",
    "werkzeug>=2.3.7,<3.0.0",
    
    # Database dependencies
    "sqlalchemy>=2.0.21,<3.0.0",
    "alembic>=1.12.0,<2.0.0",
    
    # Serialization and validation
    "pydantic[email]>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    
    # API documentation
    "flask-openapi3>=3.1.0,<4.0.0",
    
    # Async task processing
    "celery>=5.3.4,<6.0.0",
    "redis>=5.0.1,<6.0.0",
    "flower>=2.0.1,<3.0.0",
    
    # Caching
    "flask-caching>=2.1.0,<3.0.0",
    
    # Enhanced logging
    "structlog>=23.2.0,<24.0.0",
    "coloredlogs>=15.0.1,<16.0.0",
    "python-json-logger>=2.0.7,<3.0.0",
    
    # Environment management
    "python-dotenv>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    # Development and testing dependencies
    "pytest>=7.4.2,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-flask>=1.2.0,<2.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "polyfactory>=2.16.0,<3.0.0",
    
    # Code quality and formatting
    "ruff>=0.1.6,<1.0.0",
    "pre-commit>=3.5.0,<4.0.0",
    "mypy>=1.7.0,<2.0.0",
    "types-redis>=4.6.0,<5.0.0",
    
    # Development tools
    "ipython>=8.17.0,<9.0.0",
    "ipdb>=0.13.13,<1.0.0",
]

prod = [
    # Production dependencies
    "gunicorn>=21.2.0,<22.0.0",
    "gevent>=23.9.0,<24.0.0",
]

[project.urls]
Homepage = "https://github.com/fireflow/fireflow"
Documentation = "https://fireflow.readthedocs.io/"
Repository = "https://github.com/fireflow/fireflow.git"
"Bug Tracker" = "https://github.com/fireflow/fireflow/issues"

[project.scripts]
fireflow = "app:main"
fireflow-worker = "celery_worker:main"

[dependency-groups]
dev = [
    "polyfactory>=2.22.2",
    "pytest>=7.4.4",
    "ruff>=0.12.11",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors  
    "E9",      # pycodestyle errors
    "F",       # Pyflakes
    "W",       # pycodestyle warnings
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "YTT",     # flake8-2020
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "FBT",     # flake8-boolean-trap
    "B",       # flake8-bugbear
    "A",       # flake8-builtins
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "DTZ",     # flake8-datetimez
    "T10",     # flake8-debugger
    "EM",      # flake8-errmsg
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "ICN",     # flake8-import-conventions
    "G",       # flake8-logging-format
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "T20",     # flake8-print
    "PYI",     # flake8-pyi
    "PT",      # flake8-pytest-style
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SLF",     # flake8-self
    "SLOT",    # flake8-slots
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TCH",     # flake8-type-checking
    "INT",     # flake8-gettext
    "ARG",     # flake8-unused-arguments
    "PTH",     # flake8-use-pathlib
    "ERA",     # eradicate
    "PD",      # pandas-vet
    "PGH",     # pygrep-hooks
    "PL",      # Pylint
    "TRY",     # tryceratops
    "FLY",     # flynt
    "NPY",     # NumPy-specific rules
    "PERF",    # Perflint
    "FURB",    # refurb
    "LOG",     # flake8-logging
    "RUF",     # Ruff-specific rules
]

ignore = [
    "S101",    # Use of assert detected
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "A003",    # Class attribute shadows a python builtin
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "G004",    # Logging statement uses f-string
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "DTZ001",  # datetime.datetime() called without a tzinfo argument (test data)
    "DTZ003",  # datetime.datetime.utcnow() used (test data)
    "PLC0415", # import should be at the top-level (test imports)
    "SIM117",  # Use a single with statement (test readability)
    "PT011",   # pytest.raises() is too broad (test flexibility)
    "B017",    # Do not assert blind exception (test flexibility)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["fireflow", "src"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "flask_openapi3.*",
    "flask_caching.*",
    "celery.*",
    "kombu.*",
    "structlog.*",
    "coloredlogs.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
pythonpath = [
    "src",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
