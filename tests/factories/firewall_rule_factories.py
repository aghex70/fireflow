"""Polyfactory factories for firewall rule entities."""

import random
from polyfactory.factories import DataclassFactory

from src.domain.entities.firewall_rule.firewall_rule import (
    FirewallRule,
    RuleActionEnum,
    RuleProtocolEnum,
)


def get_random_ipv4_cidr() -> str:
    """Generate a random IPv4 CIDR block."""
    networks = [
        "192.168.1.0/24",
        "10.0.0.0/8",
        "172.16.0.0/12",
        "192.168.0.0/16",
        "10.10.0.0/16",
        "192.168.100.0/24",
        "172.16.1.0/24",
        "0.0.0.0/0",
    ]
    return random.choice(networks)


class FirewallRuleFactory(DataclassFactory[FirewallRule]):
    """Factory for creating FirewallRule instances."""

    __model__ = FirewallRule
    __check_model__ = False  

    @classmethod
    def build(cls, **kwargs):
        """Build a FirewallRule with valid CIDR values and port ranges."""
        if "source_cidr" not in kwargs:
            kwargs["source_cidr"] = get_random_ipv4_cidr()
        if "destination_cidr" not in kwargs:
            kwargs["destination_cidr"] = get_random_ipv4_cidr()
            
        # Ensure valid port ranges (minimum <= maximum)
        if "source_port_minimum" in kwargs and "source_port_maximum" not in kwargs:
            kwargs["source_port_maximum"] = kwargs["source_port_minimum"]
        elif "source_port_maximum" in kwargs and "source_port_minimum" not in kwargs:
            kwargs["source_port_minimum"] = kwargs["source_port_maximum"]
        elif "source_port_minimum" in kwargs and "source_port_maximum" in kwargs:
            min_port = min(kwargs["source_port_minimum"], kwargs["source_port_maximum"])
            max_port = max(kwargs["source_port_minimum"], kwargs["source_port_maximum"])
            kwargs["source_port_minimum"] = min_port
            kwargs["source_port_maximum"] = max_port
            
        if "destination_port_minimum" in kwargs and "destination_port_maximum" not in kwargs:
            kwargs["destination_port_maximum"] = kwargs["destination_port_minimum"]
        elif "destination_port_maximum" in kwargs and "destination_port_minimum" not in kwargs:
            kwargs["destination_port_minimum"] = kwargs["destination_port_maximum"]
        elif "destination_port_minimum" in kwargs and "destination_port_maximum" in kwargs:
            min_port = min(kwargs["destination_port_minimum"], kwargs["destination_port_maximum"])
            max_port = max(kwargs["destination_port_minimum"], kwargs["destination_port_maximum"])
            kwargs["destination_port_minimum"] = min_port
            kwargs["destination_port_maximum"] = max_port
            
        rule = super().build(**kwargs)
        
        # Post-build validation to fix any invalid port ranges generated by polyfactory
        # Ensure both source ports are either null or both have values
        if (rule.source_port_minimum is None) != (rule.source_port_maximum is None):
            # Make both None if either is None
            rule.source_port_minimum = None
            rule.source_port_maximum = None
        elif rule.source_port_minimum is not None and rule.source_port_maximum is not None:
            if rule.source_port_minimum > rule.source_port_maximum:
                rule.source_port_minimum, rule.source_port_maximum = rule.source_port_maximum, rule.source_port_minimum
        
        # Ensure both destination ports are either null or both have values
        if (rule.destination_port_minimum is None) != (rule.destination_port_maximum is None):
            # Make both None if either is None
            rule.destination_port_minimum = None
            rule.destination_port_maximum = None
        elif rule.destination_port_minimum is not None and rule.destination_port_maximum is not None:
            if rule.destination_port_minimum > rule.destination_port_maximum:
                rule.destination_port_minimum, rule.destination_port_maximum = rule.destination_port_maximum, rule.destination_port_minimum
        
        return rule

    @classmethod
    def tcp_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a TCP firewall rule."""
        kwargs = {"protocol": RuleProtocolEnum.TCP}
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def udp_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a UDP firewall rule."""
        kwargs = {"protocol": RuleProtocolEnum.UDP}
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def allow_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create an allow firewall rule."""
        kwargs = {"action": RuleActionEnum.ALLOW}
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def deny_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a deny firewall rule."""
        kwargs = {"action": RuleActionEnum.DENY}
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def reject_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a reject firewall rule."""
        kwargs = {"action": RuleActionEnum.REJECT}
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def http_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a rule for HTTP traffic (port 80)."""
        kwargs = {
            "protocol": RuleProtocolEnum.TCP,
            "destination_port_minimum": 80,
            "destination_port_maximum": 80,
        }
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def https_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a rule for HTTPS traffic (port 443)."""
        kwargs = {
            "protocol": RuleProtocolEnum.TCP,
            "destination_port_minimum": 443,
            "destination_port_maximum": 443,
        }
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)

    @classmethod
    def ssh_rule(cls, policy_id: int | None = None) -> FirewallRule:
        """Create a rule for SSH traffic (port 22)."""
        kwargs = {
            "protocol": RuleProtocolEnum.TCP,
            "destination_port_minimum": 22,
            "destination_port_maximum": 22,
        }
        if policy_id is not None:
            kwargs["policy_id"] = policy_id
        return cls.build(**kwargs)
